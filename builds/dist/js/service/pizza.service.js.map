{"version":3,"sources":["service/pizza.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;YA+BA;gBACI,sBAAoB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;gBAC9B,CAAC;gBAED,+BAAQ,GAAR;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kCAAkC,CAAC;yBACnD,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;yBAChC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACjC,CAAC;gBAEO,kCAAW,GAAnB,UAAoB,KAAU;oBAC1B,gFAAgF;oBAChF,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,IAAI,cAAc,CAAC;oBAC7C,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;oBAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACpC,CAAC;gBAhBL;oBAAC,iBAAU,EAAE;;gCAAA;gBAiBb,mBAAC;YAAD,CAhBA,AAgBC,IAAA;YAhBD,uCAgBC,CAAA","file":"service/pizza.service.js","sourcesContent":["// import {Injectable} from 'angular2/core';\n//\n// @Injectable()\n// export class PizzaService {\n//     getPizza() {\n//         return [{\n//             \"id\": 1,\n//             \"name\": \"Pizza Vegetaria\",\n//             \"price\": 5.99\n//         }, {\n//             \"id\": 2,\n//             \"name\": \"Pizza Salami\",\n//             \"price\": 10.99\n//         }, {\n//             \"id\": 3,\n//             \"name\": \"Pizza Thunfisch\",\n//             \"price\": 7.99\n//         }, {\n//             \"id\": 4,\n//             \"name\": \"Aktueller Flyer\",\n//             \"price\": 0\n//         }]\n//     }\n// }\nimport {Injectable} from 'angular2/core';\nimport {Http} from 'angular2/http';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map'; // add map function to observable\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class PizzaService {\n    constructor(private http: Http) {\n    }\n\n    getPizza() {\n        return this.http.get('http://localhost:8000/pizza.json')\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    private handleError(error: any) {\n        // In a real world app, we might send the error to remote logging infrastructure\n        let errMsg = error.message || 'Server error';\n        console.error(errMsg); // log to console instead\n        return Observable.throw(errMsg);\n    }\n}\n"],"sourceRoot":"/source/"}